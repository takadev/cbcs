TOKEN {
      <VOID : "void">
    | <CHAR : "char">
    | <SHORT : "short>
    | <INT : "int">
    | <LONG : "long">
    | <STRUCT : "struct">
    | <UNION : "union">
    | <ENUM : "enum">
    | <STATIC : "static">
    | <EXTERN : "extern">
    | <CONST : "const">
    | <SIGNED : "signed">
    | <UNSIGNED : "unsigned">
    | <IF : "if">
    | <ELSE : "else">
    | <SWITCH : "switch">
    | <CASE : "case">
    | <DEFAULT : "default">
    | <WHILE : "while">
    | <DO : "do">
    | <FOR : "for">
    | <RETURN : "return">
    | <BREAK : "break">
    | <CONTINUE : "continue">
    | <GOTO : "goto">
    | <TYPEDF : "typedef">
    | <IMPORT : "import">
    | <SIZEOF : "sizeof">
}

TOKEN: {
    <IDENTIFIER : ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

TOKEN: {
    <INTEGER: ["1"-"9"](["0"-"9"])*("U")?("L")?
            | "0"["x","X"](["0"-"9", "a"-"f","A"-"F"])+("U")?("L")?
            | "0"(["0"-"7"])*("U")?("L")?
            >
}

SPECIAL_TOKEN: { <SPACES: ([" ", "\t", "\n", "\r", "\f"]+> }

SPECIAL_TOKEN: {
    <LINE_COMMENT: "//"(~["\n", "\r"])*("\n" | "\r\n" | "\r")?>
}

MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }


MORE: { <"\""> : IN_STRING }
<IN_STRING> MORE: {
      <(~["\"","\\","\n","\r"])+>
    | <"\\"(["0"-"7"]){3}>
    | <"\\"~[]>
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }

MORE: { <"'"> : IN_CHARACTER }
<IN_CHARACTER> MORE : {
      <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM
    | <"\\" (["0"-"7"]){3}> : CHARACTER_TERM
    | <"\\"~[]>
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT }


import_stmts(): {}
{
    (import_stmt())*
}

import_stmt(): {}
{
    <IMPORT> name() ("." name())* ";"
}

name(): {}
{
    <IDENTIFIER>
}


top_defs(): {}
{
    (LOOKATHEAD(storeage() typeref() <IDENTIFIER> "("))defun()
    | LOOKATHEAD(3) defvars()
    | defconst()
    | defstruct()
    | typedef()
    )*
}

defvars(): {}
{
    storage() type() name() ["=" expr()] ("," name() ["=" expr()])* ";"
}

storage(): {}
{
    [<STATIC>]
}

defun(): {}
{
    storage() typeref() name() "(" params() ")" block()
}

params(): {}
{
    LOOKATHEAD(<VOID> ")") <VOID>
    | fixedparams() ["," "..."]
}

fixedparams(): {}
{
    param() (LOOKATHEAD(2) "," param())*
}

param(): {*
{
    type() name()
}

block(): {}
{
    "{" defvar_list() stmts() "}"
}


defstruct(): {}
{
    <STRUCT> name() member_list() ";"
}

defunion(): {}
{
    <UNION> name() member_list() ";"
}

member_list(): {}
{
    "{" (slot() ";")* "}"
}

slot(): {}
{
    type() name()
}

typedef(): {}
{
    <TYPEDEF> typeref() <IDENTIFIER> ";"
}

type(): {}
{
    typeref()
}

typeref(): {}
{
    typeref_base()
    (LOOKATHEAD(2) "[" "]"
    | "[" <INTEGER> "]"
    | "*"
    | "(" param_typerefs() ")"
    )*
}

typeref_base(): {}
{
    <VOID>
    | <CHAR>
    | <SHORT>
    | <INT>
    | <LONG>
    | LOOKAHEAD(2) <UNSIGNED> <CHAR>
    | LOOKAHEAD(2) <UNSIGNED> <SHORT>
    | LOOKAHEAD(2) <UNSIGNED> <INT>
    | <UNSIGNED> <LONG>
    | <STRICT> <IDENTIFIER>
    | <UNION> <IDENTIFIER>
    | LOOKAHEAD({|isType(getToken(1).image)}) <IDENTIFIER>
}

stmts(): {}
{
    (stmt())*
}

stmt(): {}
{
    (";"
    | LOOKAHEAD(2) labeled_stmt()
    | expr() ";"
    | block()
    | if_stmt()
    | while_stmt()
    | dowhile_stmt()
    | for_stmt()
    | switch_stmt()
    | break_stmt()
    | continue_stmt()
    | goto_stmt()
    | return_stmt()
    )
}
